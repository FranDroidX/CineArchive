<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/fix_paths.ps1">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix_paths.ps1" />
              <option name="updatedContent" value="$file = &quot;C:\Users\Francisco\Desktop\CineArchive\src\main\webapp\disenio\detalle.html&quot;&#10;$content = Get-Content $file -Raw -Encoding UTF8&#10;$content = $content -replace 'href=&quot;styles\.css&quot;', 'href=&quot;../css/styles.css&quot;'&#10;$content = $content -replace 'src=&quot;script\.js&quot;', 'src=&quot;../js/script.js&quot;'&#10;$content = $content -replace 'src=&quot;img/', 'src=&quot;../img/'&#10;[System.IO.File]::WriteAllText($file, $content, [System.Text.UTF8Encoding]::new($false))&#10;Write-Host &quot;Rutas corregidas exitosamente&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/edu/utn/inspt/cinearchive/dao/ConexionBD.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/edu/utn/inspt/cinearchive/dao/ConexionBD.java" />
              <option name="updatedContent" value="package edu.utn.inspt.cinearchive.dao;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;&#10;/**&#10; * Clase para gestionar la conexión a la base de datos&#10; */&#10;public class ConexionBD {&#10;    &#10;    private static final String URL = &quot;jdbc:mysql://localhost:3306/cinearchive&quot;;&#10;    private static final String USER = &quot;root&quot;;&#10;    private static final String PASSWORD = &quot;&quot;;&#10;    &#10;    /**&#10;     * Obtiene una conexión a la base de datos&#10;     * @return Connection&#10;     * @throws SQLException&#10;     */&#10;    public static Connection obtenerConexion() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;            return DriverManager.getConnection(URL, USER, PASSWORD);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;Driver de MySQL no encontrado&quot;, e);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Cierra la conexión a la base de datos&#10;     * @param conexion&#10;     */&#10;    public static void cerrarConexion(Connection conexion) {&#10;        if (conexion != null) {&#10;            try {&#10;                conexion.close();&#10;            } catch (SQLException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/edu/utn/inspt/cinearchive/dao/PeliculaDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/edu/utn/inspt/cinearchive/dao/PeliculaDAO.java" />
              <option name="updatedContent" value="package edu.utn.inspt.cinearchive.dao;&#10;&#10;import edu.utn.inspt.cinearchive.modelo.Pelicula;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * DAO para operaciones CRUD de Película&#10; */&#10;public class PeliculaDAO {&#10;    &#10;    /**&#10;     * Obtiene todas las películas de la base de datos&#10;     * @return List&lt;Pelicula&gt;&#10;     */&#10;    public List&lt;Pelicula&gt; obtenerTodas() {&#10;        List&lt;Pelicula&gt; peliculas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT * FROM peliculas&quot;;&#10;        &#10;        try (Connection conn = ConexionBD.obtenerConexion();&#10;             Statement stmt = conn.createStatement();&#10;             ResultSet rs = stmt.executeQuery(sql)) {&#10;            &#10;            while (rs.next()) {&#10;                // Mapear ResultSet a objeto Pelicula&#10;                // peliculas.add(mapearPelicula(rs));&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            e.printStackTrace();&#10;        }&#10;        &#10;        return peliculas;&#10;    }&#10;    &#10;    /**&#10;     * Busca una película por ID&#10;     * @param id&#10;     * @return Pelicula&#10;     */&#10;    public Pelicula obtenerPorId(int id) {&#10;        String sql = &quot;SELECT * FROM peliculas WHERE id = ?&quot;;&#10;        &#10;        try (Connection conn = ConexionBD.obtenerConexion();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;            &#10;            pstmt.setInt(1, id);&#10;            ResultSet rs = pstmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                // return mapearPelicula(rs);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            e.printStackTrace();&#10;        }&#10;        &#10;        return null;&#10;    }&#10;    &#10;    /**&#10;     * Inserta una nueva película&#10;     * @param pelicula&#10;     * @return boolean&#10;     */&#10;    public boolean insertar(Pelicula pelicula) {&#10;        String sql = &quot;INSERT INTO peliculas (titulo, director, anio) VALUES (?, ?, ?)&quot;;&#10;        &#10;        try (Connection conn = ConexionBD.obtenerConexion();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;            &#10;            // pstmt.setString(1, pelicula.getTitulo());&#10;            // pstmt.setString(2, pelicula.getDirector());&#10;            // pstmt.setInt(3, pelicula.getAnio());&#10;            &#10;            return pstmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            e.printStackTrace();&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza una película existente&#10;     * @param pelicula&#10;     * @return boolean&#10;     */&#10;    public boolean actualizar(Pelicula pelicula) {&#10;        String sql = &quot;UPDATE peliculas SET titulo = ?, director = ?, anio = ? WHERE id = ?&quot;;&#10;        &#10;        try (Connection conn = ConexionBD.obtenerConexion();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;            &#10;            // Implementar setters&#10;            &#10;            return pstmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            e.printStackTrace();&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Elimina una película por ID&#10;     * @param id&#10;     * @return boolean&#10;     */&#10;    public boolean eliminar(int id) {&#10;        String sql = &quot;DELETE FROM peliculas WHERE id = ?&quot;;&#10;        &#10;        try (Connection conn = ConexionBD.obtenerConexion();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;            &#10;            pstmt.setInt(1, id);&#10;            return pstmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            e.printStackTrace();&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/edu/utn/inspt/cinearchive/modelo/Pelicula.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/edu/utn/inspt/cinearchive/modelo/Pelicula.java" />
              <option name="updatedContent" value="package edu.utn.inspt.cinearchive.modelo;&#10;&#10;/**&#10; * Clase modelo que representa una Película&#10; */&#10;public class Pelicula {&#10;    &#10;    private int id;&#10;    private String titulo;&#10;    private String director;&#10;    private int anio;&#10;    private String genero;&#10;    private String sinopsis;&#10;    private String urlImagen;&#10;    &#10;    // Constructor vacío&#10;    public Pelicula() {&#10;    }&#10;    &#10;    // Constructor con parámetros&#10;    public Pelicula(int id, String titulo, String director, int anio) {&#10;        this.id = id;&#10;        this.titulo = titulo;&#10;        this.director = director;&#10;        this.anio = anio;&#10;    }&#10;    &#10;    // Getters y Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;    &#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;    &#10;    public String getTitulo() {&#10;        return titulo;&#10;    }&#10;    &#10;    public void setTitulo(String titulo) {&#10;        this.titulo = titulo;&#10;    }&#10;    &#10;    public String getDirector() {&#10;        return director;&#10;    }&#10;    &#10;    public void setDirector(String director) {&#10;        this.director = director;&#10;    }&#10;    &#10;    public int getAnio() {&#10;        return anio;&#10;    }&#10;    &#10;    public void setAnio(int anio) {&#10;        this.anio = anio;&#10;    }&#10;    &#10;    public String getGenero() {&#10;        return genero;&#10;    }&#10;    &#10;    public void setGenero(String genero) {&#10;        this.genero = genero;&#10;    }&#10;    &#10;    public String getSinopsis() {&#10;        return sinopsis;&#10;    }&#10;    &#10;    public void setSinopsis(String sinopsis) {&#10;        this.sinopsis = sinopsis;&#10;    }&#10;    &#10;    public String getUrlImagen() {&#10;        return urlImagen;&#10;    }&#10;    &#10;    public void setUrlImagen(String urlImagen) {&#10;        this.urlImagen = urlImagen;&#10;    }&#10;    &#10;    @Override&#10;    public String toString() {&#10;        return &quot;Pelicula{&quot; +&#10;                &quot;id=&quot; + id +&#10;                &quot;, titulo='&quot; + titulo + '\'' +&#10;                &quot;, director='&quot; + director + '\'' +&#10;                &quot;, anio=&quot; + anio +&#10;                '}';&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>